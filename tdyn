#!/usr/bin/perl -w
use strict;
use feature 'switch';
use Pod::Usage;
use POSIX qw(strftime);
use Getopt::Long;
use Config::General;
use Proc::Daemon; use Proc::PID::File;
use Socket;
use LWP::Simple; use LWP::UserAgent; use HTTP::Request::Common;
use MIME::Base64;

our $APP = 'tdyn';
our $VERSION = '0.2';
my $configfile; my %config;
my $logfile;
my $ua = new LWP::UserAgent;

sub usage
{
	pod2usage(
		msg     => "$APP v$VERSION",
		verbose => 1,
		exitval => 0,
	);
}

sub logme
{
	print STDERR "[",strftime("%D %T", localtime),"] $_[0]";
}

sub config_init
{
	$configfile = $_[0] and return if $_[0] and -e $_[0];
	my @configpaths = (
		'tdyn.conf',
		'/etc/tdyn.conf',
	);
	for (@configpaths) {
		$configfile = $_ if -e $_;
	}
	die "Config file not found in default paths.\nUse -c to set a config file path or see --man for more infos.\n" unless $configfile;
}

sub config_load
{
	my $conf = new Config::General(
		'-ConfigFile' => $configfile,
		'-CComments' => 1,
	);
	%config = $conf->getall;
	my @configparams = ('username', 'password', 'domains');
	my @missingparams;
	for (@configparams) {
		push(@missingparams, $_) unless $config{$_};
	}
	return if $#missingparams < 1;
	my $missingparamslist = join(', ', @missingparams);
	die "$missingparamslist params not found in config file.\n";
	open (STDERR, ">>$config{'logfile'}") or die "Unable to open logfile.\n" if $config{'logfile'};
}

sub daemon
{
	Proc::Daemon::Init(
		pid_file => '/var/run/tdyn.pid',
	);
	if (Proc::PID::File->running()) {
		exit(0);
	}
}

sub kill_daemon
{
	my $pid = Proc::Daemon::Status('/var/run/tdyn.pid');
	Proc::Daemon::Kill_Daemon($pid);
}

sub currentip
{
	my $ip = $ua->get('http://www.whatismyip.org/');
	if ($ip->is_success) {
		return $ip->content;
	} else {
		logme "Unable to obtain ip: $ip->status_line\n";
	}
}

sub updateip
{
	my @hosts = split(/,/, $config{'domains'});
	my $auth = encode_base64("$config{'username'}:$config{'password'}");
	my @headers = (
		'User-Agent'    => 'tdyn',
		'Authorization' => "Basic $auth",
	);
	foreach my $host (@hosts) {
		my $ip = &currentip;
		if ($ip) {
			my $hostip = inet_ntoa(inet_aton($host));
			if ($hostip ne $ip) {
				my $update = $ua->get("https://members.dyndns.org/nic/update?hostname=$host&myip=$ip&wildcard=NOCHG&mx=NOCHG&backmx=NOCHG", @headers);
				if ($update->is_success) {
					given ($update->decoded_content) {
						when (/good/)     { logme "$host updated successfully.\n"; last; }
						when (/abuse/)    { logme "$host has been blocked.\n"; }
						when (/badagent/) { logme "Useragent has been blocked.\n"; }
						when (/badauth/)  { logme "Username or password wrong for account $config{'username'}.\n"; }
						when (/badsys/)   { logme "Bad system parameter.\n"; }
						when (/dnserr/)   { logme "DNS inconsistency.\n"; }
						when (/!donator/) { logme "Trying to access to a paid account feature account $config{'username'} which is free.\n"; }
						when (/nohost/)   { logme "No such host $host registred to DynDNS.\n";}
						when (/notfqdn/)  { logme "$host is and invalid hostname format.\n"; }
						when (/numhost/)  { logme "A serious error ha occurred for $_.\n"; }
						when (/!yours/)   { logme "$host does not belong to $config{'username'}.\n"; }
					}
				} else {
					logme "$update->status_line occurred while updating the ip.\n";
				}
			}
		}
	}
}

GetOptions(
	'c|config'  => sub { &config_init($ARGV); } ,
	'd|daemon'  => \&daemon,
	'k|kill'    => \&kill_daemon,
	'v|version' => sub { print "$APP v$VERSION\n"; exit 0; },
	'h|help'    => \&usage,
	  'man'     => sub { pod2usage( verbose => 3 ); },
);

&config_init unless $configfile;
&config_load;
while (1) { &updateip; sleep 60; }

=pod

=head1 NAME

tdyn - A simple dynamic dns systems IP address updater.

=head1 USAGE

  -c,   --config      load a configuration file
  -d,   --daemon      run tdyn as daemon
  -v,   --version     show version number and quit
  -h,   --help        show an help
        --man         show the manpage

=head1 CONFIGURATION

tdyn will look for a configuration file in the following locations, in
this
order:

  ./tdyn.conf
  /etc/tdyn.conf

You can find an example configuration file in docs/tdyn.conf.example.

=cut

# vim:set ts=2
