#!/usr/bin/perl -w
use strict;
use Pod::Usage;
use Getopt::Long;
use Config::General;
use Proc::Daemon; use Proc::PID::File;
use Socket;
use LWP::Simple; use LWP::UserAgent;
use MIME::Base64;

our $APP = 'tdyn';
our $VERSION = '0.1';
my $configfile; my %config;
my $ua = new LWP::UserAgent;

sub usage
{
	pod2usage(
		msg     => "$APP v$VERSION",
		verbose => 1,
		exitval => 0,
	);
}

sub config_init
{
	$configfile = $_[0] and last if $_[0] and -e $_[0];
	my @configpaths = (
		'tdyn.conf',
		'/etc/tdyn.conf',
	);
	for (@configpaths) {
		$configfile = $_ if -e $_;
	}
	die "Config file not found in default paths.\nUse -c to set a config file path or see --man for more infos.\n" unless $configfile;
}

sub config_load
{
	my $conf = new Config::General(
		'-ConfigFile' => $configfile,
		'--CComments' => 1,
	);
	%config = $conf->getall;
	my @configparams = ('username', 'password', 'domains');
	my @missingparams;
	for (@configparams) {
		push(@missingparams, $_) unless $config{$_};
	}
	last if $#missingparams < 1;
	my $missingparamslist = join(', ', @missingparams);
	die "$missingparamslist params not found in config file.\n";	
}

sub daemon
{
	Proc::Daemon::Init();
	if (Proc::PID::File->running()) {
		exit(0);
	}
}

sub currentip
{
	my $ip = get('http://www.whatismyip.org/');
	warn "Could not obtain current IP address.\n" unless $ip;
	return $ip;
}

sub updateip
{
	my @hosts = split(/,/, $config{'domains'});
	my $auth = encode_base64("$config{'username'}:$config{'password'}");
	my @headers = (
		'User-Agent'    => 'tdyn',
		'Authorization' => "Basic $auth",
	);
	for (@hosts) {
		my $ip = &currentip;
		if ($ip) {
			my $hostip = inet_ntoa(inet_aton($_));
			if ($hostip ne $ip) {
				my $update = $ua->get("https://members.dyndns.org/nic/update?hostname=$_&myip=$ip&wildcard=NOCHG&mx=NOCHG&backmx=NOCHG", @headers);
				if ($update->is_success) {
					print $update->decoded_content;
				} else {
					warn $update->status_line;
				}
			}
		}
	}
}

GetOptions(
	'c|config'  => \&config_init($ARGV),
	'd|daemon'  => \&daemon,
	'v|version' => sub { print "$APP v$VERSION\n"; exit 0; },
	'h|help'    => \&usage,
	  'man'     => sub { pod2usage( verbose => 3 ); },
);

&config_init unless $configfile;;
&config_load;
